openapi: 3.0.0
info:
  title: Baguette Shop API
  description: REST API for a simple online baguette shop.
  version: 1.0.0
servers:
  - url: http://localhost:8000/api/v1 # Příklad základní URL

tags:
  - name: Menu
    description: Operations related to baguette menu items and dough types.
  - name: Ingredients
    description: Operations related to ingredient stock.
  - name: Cart
    description: Operations for managing the user's shopping cart.
  - name: Orders
    description: Operations for placing and managing orders.
  - name: Payment
    description: Operations related to payment types.

paths:
  /dough-types:
    get:
      tags:
        - Menu
      summary: List available dough types
      description: Retrieves a list of all baguette dough types, including their extra price and current availability.
      operationId: getDoughTypes
      responses:
        '200':
          description: A list of dough types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DoughType'
        '500':
          description: Internal Server Error

  /ingredients:
    get:
      tags:
        - Ingredients
      summary: List ingredient availability
      description: Retrieves a list of all ingredients and their current availability status.
      operationId: getIngredients
      responses:
        '200':
          description: A list of ingredients with availability.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        '500':
          description: Internal Server Error
      x-internal-notes: "The 'is_available' field reflects if there's *any* stock. 'stored_qty' would remain on the model for internal logistics (e.g., reordering, async shortage notifications)."

  /menu-items:
    get:
      tags:
        - Menu
      summary: List all menu items (baguettes)
      description: Retrieves a list of all baguette menu items, including their recipes, dynamic availability based on ingredient stock, and base prices.
      operationId: getMenuItems
      responses:
        '200':
          description: A list of menu items.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
        '500':
          description: Internal Server Error
      x-internal-notes: "Availability ('is_available' field) will be dynamically evaluated based on ingredient stock. Consider dynamic base_price increase on ingredient shortage if stock is low."

  /cart:
    get:
      tags:
        - Cart
      summary: Get current user's shopping cart
      description: Retrieves the details of the current user's shopping cart. Prices (total_price, vat, wo_vat_price) are calculated server-side. For simplicity, only one cart per user/session is assumed.
      operationId: getMyCart
      responses:
        '200':
          description: The user's shopping cart details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized (if authentication/session is required and not provided)
        '500':
          description: Internal Server Error

  /cart/items:
    post:
      tags:
        - Cart
      summary: Add item to cart
      description: Adds a new menu item with a specified dough type and quantity to the current user's shopping cart. Cart total prices are recalculated. For simplicity, only one cart per user/session is assumed.
      operationId: addCartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemRequest'
      responses:
        '200':
          description: The updated shopping cart details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Bad Request (e.g., invalid IDs, insufficient stock)
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      x-internal-notes: "Logic: Backend calculates price and checks availability (ingredients + dough) on item addition. Returns 400 if not available."

  /cart/items/{cart_item_id}:
    patch:
      tags:
        - Cart
      summary: Update item quantity in cart
      description: Updates the quantity of a specific item already in the user's cart. Cart total prices are recalculated.
      operationId: updateCartItemQuantity
      parameters:
        - name: cart_item_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the specific item within the cart.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemPatchRequest'
      responses:
        '200':
          description: The updated shopping cart details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Bad Request (e.g., invalid quantity, insufficient stock)
        '401':
          description: Unauthorized
        '404':
          description: Cart item not found
        '500':
          description: Internal Server Error

    delete:
      tags:
        - Cart
      summary: Remove item from cart
      description: Removes a specific item from the user's shopping cart. Cart total prices are recalculated.
      operationId: deleteCartItem
      parameters:
        - name: cart_item_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the specific item within the cart.
      responses:
        '204':
          description: Item successfully removed (No Content).
        '401':
          description: Unauthorized
        '404':
          description: Cart item not found
        '500':
          description: Internal Server Error

  /payment-types:
    get:
      tags:
        - Payment
      summary: List available payment types
      description: Retrieves a list of all supported payment methods.
      operationId: getPaymentTypes
      responses:
        '200':
          description: A list of payment types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentType'
        '500':
          description: Internal Server Error

  /orders:
    post:
      tags:
        - Orders
      summary: Place a new order
      description: Creates a new order from the current user's shopping cart. Requires a payment type. The cart is cleared upon successful order creation. For simplicity, only one cart per user/session is assumed.
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
      responses:
        '201':
          description: Order successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreatedResponse'
        '400':
          description: Bad Request (e.g., invalid payment type, empty cart, insufficient stock)
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      x-internal-notes: "Critical step: Final re-check of ingredient/dough availability and atomic stock reduction. Cart is cleared after successful order."

    get:
      tags:
        - Orders
      summary: Get all my orders
      description: Retrieves a list of all orders placed by the current user. For simplicity, only orders for the assumed single user/session are returned.
      operationId: getMyOrders
      responses:
        '200':
          description: A list of user's orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderSummary'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /orders/{order_id}:
    get:
      tags:
        - Orders
      summary: Get order details
      description: Retrieves the detailed information for a specific order by its ID. Assumes the order belongs to the current user.
      operationId: getOrderDetail
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the order to retrieve.
      responses:
        '200':
          description: Detailed order information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
        '401':
          description: Unauthorized
        '404':
          description: Order not found or not belonging to the user.
        '500':
          description: Internal Server Error

components:
  schemas:
    # --- Menu Related Schemas ---
    DoughType:
      type: object
      required:
        - id
        - dough_type
        - extra_price
        - is_available # Změněno: available -> is_available
      properties:
        id:
          type: integer
          format: int64
          example: 1
        dough_type:
          type: string
          example: "světlá"
        extra_price:
          type: number
          format: float
          example: 0
        is_available: # Změněno: available -> is_available
          type: boolean
          example: true

    Ingredient:
      type: object
      required:
        - ingredient_name
        - is_available
      properties:
        ingredient_name:
          type: string
          example: "Šunka"
        is_available:
          type: boolean
          example: true
          description: True if there is enough stock for at least one item, False otherwise.
      x-internal-notes: "The actual 'stored_qty' will remain on the model for internal logistics (e.g., reordering, shortage alerts), but is not exposed directly via API for this use-case."

    MenuItem:
      type: object
      required:
        - id
        - name
        - ingredients
        - ingredients_ids
        - is_available # Změněno: available -> is_available
        - base_price
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Cézar"
        ingredients:
          type: array
          items:
            type: string
          example: ["kuřecí maso", "římský salát", "parmazán"]
          description: Human-readable names of ingredients in the recipe.
        ingredients_ids:
          type: array
          items:
            type: integer
            format: int64
          example: [1, 2, 3]
          description: IDs of ingredients for internal lookup and availability checks.
        is_available: # Změněno: available -> is_available
          type: boolean
          example: true
          description: Dynamically evaluated based on the availability of all required ingredients and dough types for at least one baguette.
        base_price:
          type: number
          format: float
          example: 123
          description: Price of the baguette filling, excluding dough type price.

    # --- Cart Related Schemas ---
    CartItemDetail: # Represents an item *within* the cart response
      type: object
      required:
        - menu_item_id
        - dough_type_id
        - quantity
        - price # Calculated on server
      properties:
        menu_item_id:
          type: integer
          format: int64
          example: 2
        dough_type_id:
          type: integer
          format: int64
          example: 2
        quantity:
          type: integer
          example: 1
        price:
          type: number
          format: float
          example: 123
          description: Calculated price for this specific item in cart (base_price + dough_type.extra_price).
        note:
          type: string
          nullable: true
          example: "No spicy!"

    Cart:
      type: object
      required:
        - id
        - total_price
        - vat
        - wo_vat_price
        - items
      properties:
        id:
          type: integer
          format: int64
          example: 21
        total_price:
          type: number
          format: float
          example: 379
          description: Total price of the cart including VAT. Calculated server-side.
        vat:
          type: number
          format: float
          example: 15
          description: Total VAT amount. Calculated server-side.
        wo_vat_price:
          type: number
          format: float
          example: 350
          description: Total price of the cart without VAT. Calculated server-side.
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemDetail'
          description: List of items currently in the cart.

    CartItemRequest: # For POST /cart/items
      type: object
      required:
        - menu_item_id
        - dough_type_id
        - quantity
      properties:
        menu_item_id:
          type: integer
          format: int64
          example: 2
        dough_type_id:
          type: integer
          format: int64
          example: 2
        quantity:
          type: integer
          example: 1
        note:
          type: string
          nullable: true
          example: "No spicy!"
          description: Optional note for the specific cart item.

    CartItemPatchRequest: # For PATCH /cart/items/{cart_item_id}
      type: object
      properties:
        quantity:
          type: integer
          example: 1
          minimum: 0 # Allow 0 to effectively remove item
          description: New quantity for the cart item.

    # --- Payment Related Schemas ---
    PaymentType:
      type: object
      required:
        - id
        - payment_type
      properties:
        id:
          type: integer
          format: int64
          example: 1
        payment_type:
          type: string
          example: "cash"

    # --- Order Related Schemas ---
    OrderCreateRequest: # For POST /orders
      type: object
      required:
        - cart_id
        - payment_type_id
      properties:
        cart_id:
          type: integer
          format: int64
          example: 21
          description: The ID of the cart to convert into an order.
        payment_type_id:
          type: integer
          format: int64
          example: 1
          description: The ID of the chosen payment method.
        # user_id is implicit from assumed single user/session context
        # order_status is set by server
    
    OrderCreatedResponse: # Response for successful POST /orders
      type: object
      required:
        - id
        - status
        - message
      properties:
        id:
          type: integer
          format: int64
          example: 1001
          description: The ID of the newly created order.
        status:
          type: string
          example: "Created"
          description: Initial status of the order.
        message:
          type: string
          example: "Order created successfully!"

    OrderSummary: # For GET /orders (list)
      type: object
      required:
        - id
        - status
        - total_price
        - created_at
      properties:
        id:
          type: integer
          format: int64
          example: 21
        status:
          type: string
          example: "Preparing food"
        total_price:
          type: number
          format: float
          example: 379
        created_at:
          type: string
          format: date-time
          example: "2025-07-25T10:30:00Z"
        # user_id is implicit for 'my orders' list

    OrderDetail: # For GET /orders/{order_id} (detail)
      type: object
      required:
        - id
        - status
        - total_price
        - price_without_vat
        - vat_amount
        - payment_type
        - created_at
        - updated_at
        - order_items
      properties:
        id:
          type: integer
          format: int64
          example: 21
        status:
          type: string
          example: "delivered"
        total_price:
          type: number
          format: float
          example: 379
        price_without_vat:
          type: number
          format: float
          example: 350
        vat_amount:
          type: number
          format: float
          example: 15
        payment_type:
          type: string
          example: "cash"
        created_at:
          type: string
          format: date-time
          example: "2025-07-25T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-07-25T11:00:00Z"
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemDetail'
          description: Detailed list of items included in this order.

    OrderItemDetail: # Represents an item *within* the final order
      type: object
      required:
        - menu_item_name
        - dough_type_name
        - quantity
        - unit_price
      properties:
        id: # ID of the specific order item
          type: integer
          format: int64
          readOnly: true
        menu_item_name:
          type: string
          example: "Šunková"
        dough_type_name:
          type: string
          example: "celozrnná"
        quantity:
          type: integer
          example: 1
        unit_price:
          type: number
          format: float
          example: 123
          description: Price per unit at the time of order creation.
        note:
          type: string
          nullable: true
          example: "No spicy!"