openapi: 3.0.0
info:
  title: Baguette Shop API
  description: REST API for a simple online baguette shop.
  version: 1.0.0
servers:
  - url: http://localhost:8000/api/eshop # Corrected base URL

security:
  - basicAuth: [] # Basic Authentication is now used

tags:
  - name: Menu
    description: Operations related to baguette menu items and dough types.
  - name: Ingredients
    description: Operations related to ingredient stock.
  - name: Cart
    description: Operations for managing the user's shopping cart.
  - name: Orders
    description: Operations for placing and managing orders.
  - name: Payment
    description: Operations related to payment types.

paths:
  /dough-types:
    get:
      tags:
        - Menu
      summary: List available dough types
      responses:
        '200':
          description: A list of dough types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DoughType'
  /dough-types/{id}: # Changed from {pk}
    get:
      tags:
        - Menu
      summary: Get dough type details
      parameters:
        - name: id # Changed from pk
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dough type. # Updated description
      responses:
        '200':
          description: Dough type details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoughType'
        '404':
          description: Dough type not found.

  /ingredients:
    get:
      tags:
        - Ingredients
      summary: List ingredient availability
      responses:
        '200':
          description: A list of ingredients with availability.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'

  /menu-items:
    get:
      tags:
        - Menu
      summary: List all menu items (baguettes)
      responses:
        '200':
          description: A list of menu items.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'

  /cart:
    get:
      tags:
        - Cart
      summary: Get current user's shopping cart
      security:
        - basicAuth: []
      responses:
        '200':
          description: The user's shopping cart details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized.

  /cart/items:
    post:
      tags:
        - Cart
      summary: Add item to cart
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemRequest'
      responses:
        '200':
          description: The updated shopping cart details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Bad Request (e.g., invalid IDs, insufficient stock).
        '401':
          description: Unauthorized.

  /cart/items/{id}: # Changed from {pk}
    patch:
      tags:
        - Cart
      summary: Update item quantity in cart
      security:
        - basicAuth: []
      parameters:
        - name: id # Changed from pk
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the specific item within the cart. # Updated description
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemPatchRequest'
      responses:
        '200':
          description: The updated shopping cart details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Cart item not found.

    delete:
      tags:
        - Cart
      summary: Remove item from cart
      security:
        - basicAuth: []
      parameters:
        - name: id # Changed from pk
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the specific item within the cart. # Updated description
      responses:
        '204':
          description: Item successfully removed.
        '401':
          description: Unauthorized.
        '404':
          description: Cart item not found.

  /payment-types:
    get:
      tags:
        - Payment
      summary: List available payment types
      responses:
        '200':
          description: A list of payment types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentType'

  /orders: # GET for listing
    get:
      tags:
        - Orders
      summary: Get all my orders
      security:
        - basicAuth: []
      responses:
        '200':
          description: A list of user's orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderSummary'
        '401':
          description: Unauthorized.

  /orders/create:
    post:
      tags:
        - Orders
      summary: Place a new order
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
      responses:
        '201':
          description: Order successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad Request (e.g., invalid payment type, empty cart, insufficient stock).
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden (if specific permissions apply beyond basic auth).

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order details
      security:
        - basicAuth: []
      parameters:
        - name: id # Changed from pk
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the order to retrieve. # Updated description
      responses:
        '200':
          description: Detailed order information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
        '401':
          description: Unauthorized.
        '404':
          description: Order not found or not belonging to the user.

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  schemas:
    DoughType:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        extra_price:
          type: number
          format: float
        is_available:
          type: boolean

    Ingredient:
      type: object
      properties:
        id:
          type: integer
        ingredient_name:
          type: string
        is_available:
          type: boolean

    MenuItem:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        base_price:
          type: number
          format: float
        ingredients:
          type: array
          items:
            type: string
        ingredients_ids:
          type: array
          items:
            type: integer
        is_available:
          type: boolean

    CartItemDetail:
      type: object
      properties:
        id:
          type: integer
        menu_item_id:
          type: integer
        dough_type_id:
          type: integer
        quantity:
          type: integer
        note:
          type: string
          nullable: true
        price:
          type: number
          format: float

    Cart:
      type: object
      properties:
        id:
          type: integer
        total_price:
          type: number
          format: float
        vat:
          type: number
          format: float
        wo_vat_price:
          type: number
          format: float
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemDetail'

    CartItemRequest:
      type: object
      properties:
        menu_item_id:
          type: integer
        dough_type_id:
          type: integer
        quantity:
          type: integer
        note:
          type: string
          nullable: true

    CartItemPatchRequest:
      type: object
      properties:
        quantity:
          type: integer

    PaymentType:
      type: object
      properties:
        id:
          type: integer
        payment_type:
          type: string

    OrderCreateRequest:
      type: object
      properties:
        cart_id:
          type: integer
        payment_type_id:
          type: integer

    OrderResponse:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
        message:
          type: string

    OrderSummary:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
        total_price:
          type: number
          format: float
        created_at:
          type: string
          format: date-time

    OrderDetail:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
        total_price:
          type: number
          format: float
        price_without_vat:
          type: number
          format: float
        vat_amount:
          type: number
          format: float
        payment_type:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemDetail'

    OrderItemDetail:
      type: object
      properties:
        id:
          type: integer
        menu_item_name_at_order:
          type: string
        dough_type_name_at_order:
          type: string
        quantity:
          type: integer
        unit_price_at_order:
          type: number
          format: float
        note:
          type: string
          nullable: true
